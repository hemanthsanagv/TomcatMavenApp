using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.Serialization;
using Microsoft.Xrm.Sdk;
using System.Xml;

namespace SecureandUnsecureConfig
{
    public class PassingdatatoPlugin:IPlugin
    {
        
          private XmlDocument _pluginConfiguration;

        public PassingdatatoPlugin(string unsecureConfig, string secureConfig)
        {
            if (string.IsNullOrEmpty(unsecureConfig))
            {
                throw new InvalidPluginExecutionException("Unsecure configuration missing.");
            }
            _pluginConfiguration = new XmlDocument();

            _pluginConfiguration.LoadXml(unsecureConfig);
        }

          public void Execute(IServiceProvider serviceProvider)
          {
              // Obtain the execution context from the service provider.
              IPluginExecutionContext context =
                  (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));
              // Get a reference to the organization service.
              IOrganizationServiceFactory factory =
                  (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
              IOrganizationService service = factory.CreateOrganizationService(context.UserId);
              // Get a reference to the tracing service.
              ITracingService tracingService = (ITracingService)serviceProvider.GetService(typeof(ITracingService));
              if (tracingService == null)
                  throw new InvalidPluginExecutionException("Failed to retrieve the tracing service.");

              EntityReference taskRegarding = null;

              string contactID = GetConfigDataString(_pluginConfiguration, "ContactID");
              Guid regardingobjectId = new Guid(contactID.ToString());//GUID
              //74735b89-3de8-eb11-bacb-6045bd72f4ce
              //Guid regardingobjectId = new Guid("cb74e59f-eb20-ec11-b6e6-000d3af2aa67");//GUID

              string regardingobjectidType = "contact";

              taskRegarding = new EntityReference(regardingobjectidType, regardingobjectId);

              Guid createdRecordId = createEntityRecord("task", taskRegarding, service);

          }
          public static string GetConfigDataString(XmlDocument doc, string label)
          {
              return GetValueNode(doc, label);
          }
          private static string GetValueNode(XmlDocument doc, string key)
          {
              XmlNode node = doc.SelectSingleNode(String.Format("Settings/setting[@name='{0}']", key));
              if (node != null)
              {
                  return node.SelectSingleNode("value").InnerText;
              }
              return string.Empty;
          }

          public Guid createEntityRecord(string entityName, EntityReference regardingObject, IOrganizationService crmService)
          {
              // Create a task activity to follow up with the account customer in 7 days. 
              Entity followup = new Entity(entityName);//task

              followup["subject"] = "Created Task about Contact which is came from Unsecure."; // hard coded Values
              followup["description"] = "Follow up with the customer. Check if there are any new issues that need resolution.";
              followup["scheduledstart"] = DateTime.Now.AddDays(7);
              followup["scheduledend"] = DateTime.Now.AddDays(7);
              followup["category"] = regardingObject.LogicalName;//account
              followup["regardingobjectid"] = regardingObject; // contact gUID



              return crmService.Create(followup);
          }
    }
}
